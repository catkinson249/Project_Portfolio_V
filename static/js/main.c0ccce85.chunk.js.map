{"version":3,"sources":["components/Header.js","components/Search.js","components/Random.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Component","Search","state","searchValue","drinks","handleOnChange","e","setState","target","value","handleSearch","makeApiCall","searchInput","searchUrl","fetch","then","response","json","jsonData","name","type","placeholder","onChange","this","onClick","map","drink","i","key","strDrink","src","strDrinkThumb","alt","width","strInstructions","Random","recipes","userSearch","handleRandom","data","recipeItems","recipe","idDrink","height","strIngredient1","strIngredient2","strIngredient3","strIngredient4","strIngredient5","strIngredient6","strIngredient7","strIngredient8","strIngredient9","strIngredient10","App","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c0ccce85.chunk.js","sourcesContent":["import React, { Component } from 'react'\n// import { Button } from '@material-ui/core'\n\nclass Header extends Component {\n    render() {\n        return (\n            <header>\n                <div className='bckgrd-img'>\n                    <div className='title-block'>\n                        <span>Fusion</span>\n                        <span>Bar-App</span>\n                    </div>\n                </div>\n                <div className=\"bckgrd\">\n                    <h1>Welcome!</h1>\n                </div>\n            </header>\n        )\n    }\n}\nexport default Header\n\n","// WORKS\n\nimport React, { Component } from 'react';\n\n\nclass Search extends Component {\n    // variables\n    state = {\n        searchValue: \"\",\n        drinks: [],\n    }\n\n    // handlers\n    handleOnChange = e => {\n        this.setState({ searchValue: e.target.value })\n    }\n\n    handleSearch = () => {\n        this.makeApiCall(this.state.searchValue)\n    }\n\n    // functions\n    makeApiCall = searchInput => {\n        let searchUrl = `https://thecocktaildb.com/api/json/v1/1/search.php?s=${searchInput}`\n\n        fetch(searchUrl)\n            .then(response => {\n                return response.json()\n            })\n            .then(jsonData => {\n                this.setState({ drinks: jsonData.drinks })\n            })\n    }\n\n    // interface \n    render() {\n        return (\n            <div className=\"container\">\n                <h2>Search for drink recipes by name</h2>\n\n                <input className=\"input\" name=\"text\"\n                    type=\"text\"\n                    placeholder=\"Search\"\n                    onChange={e => this.handleOnChange(e)}\n                    value={this.state.searchValue} />\n\n                <button onClick={this.handleSearch} className=\"btn\">Search</button>\n                {this.state.drinks ? (\n                    <div>\n                        {this.state.drinks.map((drink, i) => (\n                            <div key={i}>\n                                <h2>{drink.strDrink}</h2>\n                                <img src={drink.strDrinkThumb} alt=\"drink-thumbnail\" width=\"100px\" />\n                                <p>{drink.strInstructions}</p>\n                            </div>\n                        ))}\n                    </div>\n                ) : (\n                        <p>Try searching for a drink</p>\n                    )}\n            </div>\n        );\n    }\n}\nexport default Search;\n","import React, { Component } from 'react';\n\n\nclass Random extends Component {\n\n    state = {\n        recipes: [],\n        userSearch: '',\n    }\n\n    componentWillMount() {\n        let url = 'https://www.thecocktaildb.com/api/json/v1/1/search.php?s=margarita'\n        fetch(url)\n            .then(response => response.json())\n            .then(data => this.setState({ recipes: data.drinks }))\n    }\n\n\n\n    // for random button\n    handleRandom = e => {\n        let url = 'https://www.thecocktaildb.com/api/json/v1/1/random.php'\n        fetch(url)\n            .then(response => response.json())\n            .then(data => this.setState({ recipes: data.drinks }))\n    }\n\n\n\n    // render drink list and drink values\n    render() {\n        const recipeItems = this.state.recipes.map(recipe => (\n            <div key={recipe.idDrink}>\n                <img src={recipe.strDrinkThumb} alt={recipe.strDrink} height='150px' />\n                <h2>{recipe.strDrink}</h2>\n                <p>Ingredients: </p>\n                <p>{recipe.strIngredient1}</p>\n                <p>{recipe.strIngredient2}</p>\n                <p>{recipe.strIngredient3}</p>\n                <p>{recipe.strIngredient4}</p>\n                <p>{recipe.strIngredient5}</p>\n                <p>{recipe.strIngredient6}</p>\n                <p>{recipe.strIngredient7}</p>\n                <p>{recipe.strIngredient8}</p>\n                <p>{recipe.strIngredient9}</p>\n                <p>{recipe.strIngredient10}</p>\n                <h3>{recipe.strInstructions}</h3>\n            </div>\n        ));\n\n        return (\n            <div className=\"container\">\n                <button onClick={this.handleRandom} className=\"btn\">Browse Random</button>\n                <div className=\"default-list\">\n                    <h1>Drink Recipes: </h1>\n                    {recipeItems}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Random;\n\n\n\n\n\n","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/Header'\nimport Search from './components/Search'\nimport Random from './components/Random'\n\nimport { HashRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <ul className=\"App-links\">\n            <li className='item'>\n              <Link className='Nav-links' to=\"/\">Home</Link>\n            </li>\n            <li className='item'>\n              <Link className='Nav-links' to=\"/search\">Search</Link>\n            </li>\n            <li className='item'>\n              <Link className='Nav-links' to=\"/random\">Random</Link>\n            </li>\n          </ul>\n          <hr />\n          <Switch>\n            <Route exact path='/' component={Header} />\n            <Route path='/search' component={Search} />\n            <Route path='/random' component={Random} />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nif (module.hot) {\n  module.hot.accept()\n}\n\nserviceWorker.unregister();\n"],"sourceRoot":""}